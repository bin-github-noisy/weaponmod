plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_version"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    var replaceProperties = [
            minecraft_version          : minecraft_version, minecraft_version_range: minecraft_version_range,
            minecraft_version_condition: minecraft_version_condition,
            forge_version              : forge_version, forge_version_range: forge_version_range,
            loader_version_range       : loader_version_range, mod_update_json: mod_update_json,
            architectury_version       : architectury_version, cloth_config_version: cloth_config_version,
            mod_id                     : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors                : mod_authors, mod_authors_list: mod_authors_list, mod_description: mod_description,
            mod_issues_url             : mod_issues_url, mod_sources_url: mod_sources_url, mod_home_url: mod_home_url,
    ]
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
